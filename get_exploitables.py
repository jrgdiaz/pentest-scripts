from xml.dom import minidom
import sys

def get_exploitable_list(nessus_xml_file):

        xmldoc = minidom.parse(nessus_xml_file)
        hosts = xmldoc.getElementsByTagName('ReportHost')
        for ip in hosts:
                ip_report_items = ip.getElementsByTagName('ReportItem')
                for report_item in ip_report_items:
                        exploitables = set()
                        cves = report_item.getElementsByTagName('cve')
                        is_exploitable = report_item.getElementsByTagName('exploit_available')
                        #Nessus may choose to not display the exploit_available tag. 
                        #if we get an IndexError, it means there's no tag. So we just assume there's no public exploit.
                        try:
                                exploitable = is_exploitable[0].firstChild.nodeValue
                        except IndexError:
                                exploitable = "unknown"

                        if (report_item.getElementsByTagName('metasploit_name')):
                                exploitables.add("Metasploit Module Name: "+report_item.getElementsByTagName('metasploit_name')[0].firstChild.nodeValue)
                        elif (report_item.getElementsByTagName('d2_elliot_name')):
                                exploitables.add("D2 Elliot Module Name: "+report_item.getElementsByTagName('d2_elliot_name')[0].firstChild.nodeValue)
                        elif (report_item.getElementsByTagName('edb-id')):
                                exploitables.add("Exploit DB ID: "+report_item.getElementsByTagName('edb-id')[0].firstChild.nodeValue)
                        elif (report_item.getElementsByTagName('exploited_by_malware')):
                                exploitables.add("Exploited by malware: "+report_item.getElementsByTagName('exploited_by_malware')[0].firstChild.nodeValue)

                        if len(cves) > 1:
                                a = report_item.attributes['pluginName'].value
                                b = ",["
                                for cve in cves:
                                        b = b+cve.firstChild.nodeValue+"|"
                                print ip.attributes['name'].value+",port:"+report_item.attributes['port'].value+","+ a + b[:-1] + "],"+"Exploit available: "+exploitable+" {"+str(exploitables)+"}"
                        elif len(cves) == 1:
                                print ip.attributes['name'].value+ ",port:"+report_item.attributes['port'].value+","+report_item.attributes['pluginName'].value + "," + "["+cves[0].firstChild.nodeValue + "],"\
                                +"Exploit available: "+exploitable+" {"+str(exploitables)+"}"
                        elif len(cves) == 0 and exploitable == "true":
                                print ip.attributes['name'].value+ ",port:"+report_item.attributes['port'].value+","+report_item.attributes['pluginName'].value + "," + "[],"\
                                +"Exploit available: "+exploitable+" {"+str(exploitables)+"}"
if len(sys.argv) !=2:
                print "usage: ./gen_exploitable.py [.nessus file to check]"
                sys.exit(0)
x = sys.argv[1]
get_exploitable_list(x)
