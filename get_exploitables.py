from xml.dom import minidom
import sys
from requests_html import HTMLSession


def query_vulners(session,nasl):
    
    url = 'https://vulners.com'
    file_ = open("exploits\\exploits.csv",'a')
    file_.write("\n")
    for plugin in nasl:
        print("querying.."+url+'/nessus/'+plugin.firstChild.nodeValue)
        r = session.get(url+'/nessus/'+plugin.firstChild.nodeValue)
        r.html.render(timeout = 60)
        references = r.html.find('.vulners-link-initial')
        for i in range(0,len(references)):
            reference = references[i].links.pop()
            if ('exploitdb' in reference) or ('packetstorm' in reference) or ('cve' in reference) or ('githubexploit' in reference):
                file_ = open("exploits.csv",'a')
                file_.write(plugin.firstChild.nodeValue+","+url+reference+"\n")
                file_.close()

def get_exploitable_list(nessus_xml_file, vulners):
        #vulners = False
        session = HTMLSession()
        xmldoc = minidom.parse(nessus_xml_file)
        hosts = xmldoc.getElementsByTagName('ReportHost')
        for ip in hosts:
                ip_report_items = ip.getElementsByTagName('ReportItem')
                for report_item in ip_report_items:
                        check = False
                        exploitables = set()
                        cves = report_item.getElementsByTagName('cve')
                        is_exploitable = report_item.getElementsByTagName('exploit_available')
                        #Nessus may choose to not display the exploit_available tag. 
                        #if we get an IndexError, it means there's no tag. So we just assume there's no public exploit.
                        try:
                                exploitable = is_exploitable[0].firstChild.nodeValue
                        except IndexError:
                                exploitable = "unknown"

                        if (report_item.getElementsByTagName('metasploit_name')):
                                exploitables.add("Metasploit Module Name: "+report_item.getElementsByTagName('metasploit_name')[0].firstChild.nodeValue)
                                check = True
                        if (report_item.getElementsByTagName('d2_elliot_name')):
                                exploitables.add("D2 Elliot Module Name: "+report_item.getElementsByTagName('d2_elliot_name')[0].firstChild.nodeValue)
                                check = True
                        if (report_item.getElementsByTagName('edb-id')):
                                edb_ids = report_item.getElementsByTagName('edb-id')
                                check = True
                                for edb_id in edb_ids:
                                        exploitables.add("Exploit DB ID: "+edb_id.firstChild.nodeValue)
                        if (report_item.getElementsByTagName('exploit_framework_canvas')):
                                exploitables.add("CANVAS exploit: "+report_item.getElementsByTagName('exploit_framework_canvas')[0].firstChild.nodeValue)
                                check = True
                        if (report_item.getElementsByTagName('exploit_framework_core')):
                                exploitables.add("CORE exploit: "+report_item.getElementsByTagName('exploit_framework_core')[0].firstChild.nodeValue)
                                check = True
                        if (report_item.getElementsByTagName('exploited_by_malware')):
                                exploitables.add("Exploited by malware: "+report_item.getElementsByTagName('exploited_by_malware')[0].firstChild.nodeValue)
                                check = True
                        if (report_item.getElementsByTagName('exploited_by_nessus')):
                                exploitables.add("Exploited by Nessus: "+report_item.getElementsByTagName('exploited_by_nessus')[0].firstChild.nodeValue)
                                check = True
                        if len(cves) > 1 or check:
                                nasls = report_item.getElementsByTagName('fname')
                                a = report_item.attributes['pluginName'].value
                                b = ",["
                                for cve in cves:
                                        b = b+cve.firstChild.nodeValue+"|"
                                print (ip.attributes['name'].value+",port:"+report_item.attributes['port'].value+","+ a + b[:-1] + "],"+"Exploit available: "+exploitable+" {"+str(exploitables)+"}\n")
                                if vulners:
                                    query_vulners(session,nasls)
                        elif len(cves) == 1:
                                nasls = report_item.getElementsByTagName('fname')
                                print (ip.attributes['name'].value+ ",port:"+report_item.attributes['port'].value+","+report_item.attributes['pluginName'].value + "," + "["+cves[0].firstChild.nodeValue + "],"\
                                +"Exploit available: "+exploitable+" {"+str(exploitables)+"}\n")
                                if vulners:
                                    query_vulners(session,nasls)
                        elif len(cves) == 0 and exploitable == "true":
                                nasls = report_item.getElementsByTagName('fname')
                                print (ip.attributes['name'].value+ ",port:"+report_item.attributes['port'].value+","+report_item.attributes['pluginName'].value + "," + "[],"\
                                +"Exploit available: "+exploitable+" {"+str(exploitables)+"}\n")
                                if vulners:
                                    query_vulners(session,nasls)
if len(sys.argv) !=3:
                print ("usage: ./gen_exploitable.py [.nessus file to check] True|False")
                sys.exit(0)
x = sys.argv[1]
y = sys.argv[2]
if y == 'True':
    get_exploitable_list(x,True)
elif y == 'False':
    get_exploitable_list(x,False)
